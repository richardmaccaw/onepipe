name: Generate Deploy Branch

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  generate-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          npm install -g json
          npm install -g js-yaml

      - name: Create deployable version
        run: |
          # Parse catalogs from pnpm-workspace.yaml and replace catalog references
          node << 'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');

          // Read workspace file
          const workspace = yaml.load(fs.readFileSync('pnpm-workspace.yaml', 'utf8'));
          const catalogs = workspace.catalogs || {};

          // Read package.json
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));

          // Replace catalog references in dependencies
          for (const [name, version] of Object.entries(pkg.dependencies || {})) {
            if (version === 'catalog:') {
              pkg.dependencies[name] = catalogs.default[name] || version;
            } else if (version.startsWith('catalog:')) {
              const catalogName = version.split(':')[1];
              pkg.dependencies[name] = catalogs[catalogName]?.[name] || version;
            }
          }

          // Replace catalog references in devDependencies
          for (const [name, version] of Object.entries(pkg.devDependencies || {})) {
            if (version === 'catalog:') {
              pkg.devDependencies[name] = catalogs.default[name] || version;
            } else if (version.startsWith('catalog:')) {
              const catalogName = version.split(':')[1];
              pkg.devDependencies[name] = catalogs[catalogName]?.[name] || version;
            }
          }

          // Remove workspace dependencies
          delete pkg.dependencies['@onepipe/core'];
          delete pkg.dependencies['@onepipe/destination-bigquery'];

          // Update scripts
          pkg.scripts = {
            deploy: 'wrangler deploy',
            dev: 'wrangler dev'
          };

          // Write updated package.json
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          EOF

          # Remove workspace file and packages directory
          rm -rf pnpm-workspace.yaml packages

          # Install with npm to create a standard lockfile
          npm install

          # Add deploy-specific README
          cat > README-DEPLOY.md << 'EOF'
          # OnePipe - Deploy Branch

          [![Deploy to Cloudflare Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/richardmaccaw/onepipe/tree/deploy)

          This is an auto-generated branch optimized for Cloudflare deployment.

          **Source:** [main branch](https://github.com/richardmaccaw/onepipe)
          EOF

      - name: Push to deploy branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Deploy version from main@${GITHUB_SHA::7}"
          git push --force origin HEAD:deploy
